name: build-win64

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write   # needed for release upload on tags

jobs:
  win64:
    runs-on: windows-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      # If this repo is NOT the pdf2htmlEX source, clone it now.
      - name: Fetch pdf2htmlEX source (if needed)
        shell: bash
        run: |
          set -e
          if [ ! -e CMakeLists.txt ] && [ ! -e pdf2htmlEX/CMakeLists.txt ]; then
            git clone --depth 1 https://github.com/pdf2htmlEX/pdf2htmlEX.git source
            echo "SRCDIR=$PWD/source/pdf2htmlEX" >> $GITHUB_ENV
          else
            # You are already in the source tree
            SRCDIR="$PWD"
            [ -e pdf2htmlEX/CMakeLists.txt ] && SRCDIR="$PWD/pdf2htmlEX"
            echo "SRCDIR=$SRCDIR" >> $GITHUB_ENV
          fi

      - name: MSYS2 / MinGW setup
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          release: true
          path-type: minimal
          cache: true
          install: >
            base-devel
            git
            cmake
            ninja
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-poppler
            mingw-w64-x86_64-poppler-data
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fribidi
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-fontforge
            mingw-w64-x86_64-libspiro
            mingw-w64-x86_64-ntldd-git
            mingw-w64-x86_64-tools-git   # gendef & dlltool

      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        env:
          SRCDIR: ${{ env.SRCDIR }}
        run: |
          set -e
          cmake -S "$SRCDIR" -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/mingw64 \
            -DCMAKE_CXX_STANDARD=17

      # Make import libs for FontForge if MSYS2 doesn't ship them
      - name: Create FontForge import libs if missing
        shell: msys2 {0}
        run: |
          set -e
          mkdir -p fontforge_shims
          found_ff_lib=
          for cand in /mingw64/lib/libfontforge*.dll.a; do
            [ -f "$cand" ] && found_ff_lib="$cand" && break
          done
          if [ -z "$found_ff_lib" ]; then
            echo "Generating import libs from DLLs..."
            ff_dll=$(ls /mingw64/bin/libfontforge-*.dll 2>/dev/null | head -n1 || true)
            gd_dll=$(ls /mingw64/bin/libgdraw-*.dll 2>/dev/null | head -n1 || true)
            if [ -n "$ff_dll" ]; then
              gendef "$ff_dll" - > fontforge_shims/libfontforge.def
              dlltool -d fontforge_shims/libfontforge.def -l fontforge_shims/libfontforge.a
            fi
            if [ -n "$gd_dll" ]; then
              gendef "$gd_dll" - > fontforge_shims/libgdraw.def
              dlltool -d fontforge_shims/libgdraw.def -l fontforge_shims/libgdraw.a
            fi
          else
            cp -u /mingw64/lib/libfontforge*.dll.a fontforge_shims/libfontforge.a || true
            cp -u /mingw64/lib/libgdraw*.dll.a     fontforge_shims/libgdraw.a     || true
          fi
          # Make CMake see our shims first
          echo "CMAKE_LIBRARY_PATH=$PWD/fontforge_shims" >> $GITHUB_ENV

      - name: Build
        shell: msys2 {0}
        env:
          CMAKE_LIBRARY_PATH: ${{ env.CMAKE_LIBRARY_PATH }}
        run: |
          set -e
          cmake --build build --parallel
          test -f build/pdf2htmlEX.exe || test -f build/src/pdf2htmlEX.exe

      - name: Package (portable zip)
        shell: msys2 {0}
        run: |
          set -e
          EXE="build/pdf2htmlEX.exe"
          [ -f "$EXE" ] || EXE="build/src/pdf2htmlEX.exe"

          DIST="dist/pdf2htmlEX"
          mkdir -p "$DIST"
          cp -u "$EXE" "$DIST/"

          # gather runtime DLLs
          mkdir -p "$DIST"/bin
          ntldd -R "$EXE" \
            | awk '/mingw64\\/bin/ { for(i=1;i<=NF;i++) if ($i ~ /mingw64\\/bin\\//) print $i }' \
            | sort -u \
            | while read -r dll; do
                [ -f "$dll" ] && cp -u "$dll" "$DIST/bin/"
              done

          # include poppler-data (CMaps etc.)
          if [ -d /mingw64/share/poppler ]; then
            mkdir -p "$DIST/share"
            cp -r /mingw64/share/poppler "$DIST/share/"
          fi

          # minimal README
          cat > "$DIST/README.txt" << 'EOF'
          pdf2htmlEX (Windows portable)
          --------------------------------
          Run:
            .\pdf2htmlEX.exe --version
            .\pdf2htmlEX.exe input.pdf

          This bundle includes dependent DLLs and poppler-data.
          EOF

          (cd dist && zip -r ../pdf2htmlEX-win64.zip pdf2htmlEX)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2htmlEX-win64
          path: dist/../pdf2htmlEX-win64.zip

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/../pdf2htmlEX-win64.zip
